/* 
 * Mach Operating System
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */
/*
 *	File:	mach/machine/machine_types.defs
 *	Author:	Alessandro Forin
 *	Date:	7/92
 *
 *	Header file for the basic, machine-dependent data types.
 *	Version for 32 bit architectures.
 *
 */

#ifndef	_MACHINE_MACHINE_TYPES_DEFS_
#define	_MACHINE_MACHINE_TYPES_DEFS_	1

/*
 * A natural_t is the type for the native
 * unsigned integer type, usually 32 bits. It is suitable for
 * most counters with a small chance of overflow.
 * While historically natural_t was meant to be the same
 * as a pointer, that is not the case here.
 */
type natural_t = uint32_t;

/*
 * An integer_t is the signed counterpart
 * of the natural_t type. Both types are
 * only supposed to be used to define
 * other types in a machine-independent
 * way.
 */
type integer_t = int32_t;

/*
 * A long_natural_t is a possibly larger unsigned integer type than natural_t.
 * Should be used instead of natural_t when we want the data to be less subject
 * to overflows.
 */
#if defined(__x86_64__)
type long_natural_t = uint64_t;
#else
type long_natural_t = uint32_t;
#endif /* __x86_64__ */

/*
 * Larger version of integer_t. Only used when we want to hold possibly larger
 * values than what is possible with integer_t.
 */
#if defined(__x86_64__)
type long_integer_t = int64_t;
#else
type long_integer_t = int32_t;
#endif /* __x86_64__ */

/*
 * long_natural_t and long_integer_t for kernel <-> userland interfaces as the
 * size depends on the architecture of both kernel and userland.
 */
#if defined(KERNEL) && defined(USER32)
type rpc_long_natural_t = uint32_t;
type rpc_long_integer_t = int32_t;
#else /* KERNEL and USER32 */
type rpc_long_natural_t = long_natural_t;
type rpc_long_integer_t = long_integer_t;
#endif /* KERNEL_SERVER and USER32 */

/*
 * Physical address size
 */
type rpc_phys_addr_t = uint64_t;

#endif	/* _MACHINE_MACHINE_TYPES_DEFS_ */
