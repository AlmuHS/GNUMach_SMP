dnl Configure fragment for i386.

dnl Copyright (C) 1999, 2004, 2006, 2007, 2008 Free Software Foundation, Inc.

dnl Permission to use, copy, modify and distribute this software and its
dnl documentation is hereby granted, provided that both the copyright
dnl notice and this permission notice appear in all copies of the
dnl software, derivative works or modified versions, and any portions
dnl thereof, and that both notices appear in supporting documentation.
dnl
dnl THE FREE SOFTWARE FOUNDATION ALLOWS FREE USE OF THIS SOFTWARE IN ITS
dnl "AS IS" CONDITION.  THE FREE SOFTWARE FOUNDATION DISCLAIMS ANY
dnl LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE
dnl USE OF THIS SOFTWARE.

#
# Definitions.
#

[case $host_cpu in
  i?86)]
    AM_CONDITIONAL([HOST_ix86], [true])

    # Some of the i386-specific code checks for these.
    AC_DEFINE([__ELF__], [1], [__ELF__])

    # Determines the size of the CPU cache line.
    AC_DEFINE([CPU_L1_SHIFT], [6], [CPU_L1_SHIFT])

    [# Does the architecture provide machine-specific interfaces?
    mach_machine_routines=1;;
  *)]
    AM_CONDITIONAL([HOST_ix86], [false])[;;
esac

case $host_platform in
  at)]
    AM_CONDITIONAL([PLATFORM_at], [true])[;;
  *)]
    AM_CONDITIONAL([PLATFORM_at], [false])[;;
esac

#
# Formerly in `i386/bogus/'.
#

ncom=0
nlpr=0
case $host_platform:$host_cpu in
  at:i?86)
    ncom=4
    nlpr=1

    # i386/bogus/platforms.h]
    AC_DEFINE([AT386], [1], [AT386])[;;
  xen:i?86)
    # TODO.  That should probably not be needed.
    ncom=1
    # TODO.  That should probably not be needed.
    # i386/bogus/platforms.h]
    AC_DEFINE([AT386], [1], [AT386])[;;
  *)
    :;;
esac]

# i386/bogus/com.h
AC_DEFINE_UNQUOTED([NCOM], [$ncom], [NCOM])

# i386/bogus/lpr.h
AC_DEFINE_UNQUOTED([NLPR], [$nlpr], [NLPR])

#
# Options.
#

# The immediate console, useful for debugging early system
# initialization.  Disabled by default.
AC_DEFINE([ENABLE_IMMEDIATE_CONSOLE], [0], [ENABLE_IMMEDIATE_CONSOLE])

AC_ARG_ENABLE([lpr],
  AS_HELP_STRING([--enable-lpr], [lpr device; on ix86-at enabled by default]))
[case $host_platform:$host_cpu in
  at:i?86)
    case $enable_device_drivers in
      default)
        enable_lpr=${enable_lpr-yes};;
      *)
        enable_lpr=${enable_lpr-no};;
    esac;;
  *)
    if [ x"$enable_lpr" = xyes ]; then]
      AC_MSG_ERROR([cannot enable `lpr' in this configuration.])
    [fi;;
esac
if [ x"$enable_lpr" = xyes ]; then]
  AC_DEFINE([MACH_LPR], [], [lpr device])
  AM_CONDITIONAL([enable_lpr], [true])
[else]
  AM_CONDITIONAL([enable_lpr], [false])
[fi]


AC_ARG_ENABLE([pae],
  AS_HELP_STRING([--enable-pae], [PAE support (ix86-only); on ix86-at disabled
    by default, on ix86-xen enabled by default]))
[case $host_platform:$host_cpu in
  xen:i?86)
    enable_pae=${enable_pae-yes};;
  *:i?86)
    :;;
  *)
    if [ x"$enable_pae" = xyes ]; then]
      AC_MSG_ERROR([can only enable the `PAE' feature on ix86.])
    [fi;;
esac
if [ x"$enable_pae" = xyes ]; then]
  AC_DEFINE([PAE], [1], [PAE support])
  AM_CONDITIONAL([enable_pae], [true])
[else]
  AM_CONDITIONAL([enable_pae], [false])
[fi]

AC_ARG_WITH([_START_MAP],
  AS_HELP_STRING([--with-_START_MAP=0x1000000], [specify kernel mapping start address]),
  [_START_MAP="$withval"], [_START_MAP=0x1000000])
AC_SUBST(_START_MAP)

dnl Local Variables:
dnl mode: autoconf
dnl End:
